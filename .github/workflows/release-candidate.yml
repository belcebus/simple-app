name: Creating Release Candidate

on:
  push:
    branches:
      - 'main'

jobs:

  prepare-pom:
    name: Preparing Release Candidate
    runs-on: ubuntu-latest
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project-version

      - name: Display current version
        run: echo ${{steps.project-version.outputs.version}}

      - name: Calculating new version
        id: project-new-version
        run: echo ::set-output name=newversion::$(sed -e 's/-SNAPSHOT//g' <<< ${{steps.project-version.outputs.version}})

      - name: Display new version
        run: echo ${{steps.project-new-version.outputs.newversion}} 

      - name: removing snapshot pom.xml
        run: ./mvnw versions:set -DnewVersion=${{steps.project-new-version.outputs.newversion}} -DgenerateBackupPoms=false -q
      
      - name: Display version from pom.xml
        run: |
          mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec
          cat pom.xml | grep ${{steps.project-new-version.outputs.newversion}}
        
      - name: commiting pom.xml
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git commit -am 'removing SNAPSHOT pom'
          git push

  bump-dev-version:
    name: Bumping next development version
    needs: prepare-pom
    runs-on: ubuntu-latest
    steps:
      - name: Mocking development version bump
        run: echo "Bumping next development version"
  
  create-tag:
    needs: prepare-pom
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare-pom.outputs.new_sha }}
          fetch-depth: 0

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project-version

      - name: Show extracted Maven project version
        run: echo ${{ steps.project-version.outputs.version }}
     
      - name: GitHub Script
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.project-version.outputs.version }}-RC-${{ github.run_number }}",
              sha: context.sha
            })
            
  build:
    needs: prepare-pom
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ needs.prepare-pom.outputs.new_sha }}
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
      
    - name: Build with Maven
      run: mvn -B clean verify --file pom.xml

  deploy-preproduction:
    needs: build
    runs-on: ubuntu-latest
    env:
      APPLICATION_NAME: "poc-app"
    steps:
      - name: Deploy to Preproduction
        run: echo "Deploying to development $APPLICATION_NAME-"